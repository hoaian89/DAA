<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblParentTitle.Text" xml:space="preserve">
    <value>Order History</value>
  </data>
  <data name="lblOrderNumberHeader.Text" xml:space="preserve">
    <value>Order Number</value>
  </data>
  <data name="lblOrderDateHeader.Text" xml:space="preserve">
    <value>Order Date</value>
  </data>
  <data name="lblOrderTotalHeader.Text" xml:space="preserve">
    <value>Order Total</value>
  </data>
  <data name="lblShipDateHeader.Text" xml:space="preserve">
    <value>Status Date</value>
  </data>
  <data name="lnkEdit.Text" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="lblEditTitle.Text" xml:space="preserve">
    <value>Order Details</value>
  </data>
  <data name="lblOrderNumberTag.Text" xml:space="preserve">
    <value>Order Number</value>
  </data>
  <data name="lblOrderDateTag.Text" xml:space="preserve">
    <value>Order Date</value>
  </data>
  <data name="lblShipDateTag.Text" xml:space="preserve">
    <value>Status Date</value>
  </data>
  <data name="lblBillingAddressTag.Text" xml:space="preserve">
    <value>Billing Address</value>
  </data>
  <data name="lblShippingAddressTag.Text" xml:space="preserve">
    <value>Shipping Address</value>
  </data>
  <data name="lblModelName.Text" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="lblModelNumber.Text" xml:space="preserve">
    <value>Model Number</value>
  </data>
  <data name="lblQty.Text" xml:space="preserve">
    <value>Qty</value>
  </data>
  <data name="lblODPrice.Text" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="lblODSubtotal.Text" xml:space="preserve">
    <value>Subtotal</value>
  </data>
  <data name="lblTotalTag.Text" xml:space="preserve">
    <value>Total:</value>
  </data>
  <data name="ViewDetails.Text" xml:space="preserve">
    <value>View Details</value>
  </data>
  <data name="NoOrdersFound.Text" xml:space="preserve">
    <value>No Orders Found.</value>
  </data>
  <data name="DetailsNotFound.Text" xml:space="preserve">
    <value>Details not found!</value>
  </data>
  <data name="ShipToAddressNotAvailable.Text" xml:space="preserve">
    <value>Ship to address not available.</value>
  </data>
  <data name="BillToAddressNotAvailable.Text" xml:space="preserve">
    <value>Bill to address not available.</value>
  </data>
  <data name="lnkCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="VerificationFailed.Text" xml:space="preserve">
    <value>Your order has been received and saved, but your PayPal payment could not be verified automatically.  We will manually verify your PayPal payment and will then process your order.&lt;br/&gt;&lt;br/&gt;You can view the status of your order at any time by accessing the "{0}" section of our site.</value>
  </data>
  <data name="lblOrderStatusHeader.Text" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="lblOrderStatusTag.Text" xml:space="preserve">
    <value>Order Status</value>
  </data>
  <data name="lblPostageTag.Text" xml:space="preserve">
    <value>Shipping &amp; Handling:</value>
  </data>
  <data name="lblTaxTag.Text" xml:space="preserve">
    <value>Tax:</value>
  </data>
  <data name="lblTotalIncPostageTag.Text" xml:space="preserve">
    <value>Total:</value>
  </data>
  <data name="lnkbtnSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="AboutChange.Text" xml:space="preserve">
    <value>If you have any questions about this change, please feel free to contact us at {0}, or simply reply to this message.</value>
  </data>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancel Order</value>
  </data>
  <data name="btnGoToPayPal.Text" xml:space="preserve">
    <value>Continue to PayPal &gt;</value>
  </data>
  <data name="btnPayViaPayPal.Text" xml:space="preserve">
    <value>Pay now via PayPal</value>
  </data>
  <data name="ChangedStatus.Text" xml:space="preserve">
    <value>This order ({0}) has changed status to "{1}".</value>
  </data>
  <data name="CheckStatus.Text" xml:space="preserve">
    <value>You can check the status of your order at any time by logging in to our site and clicking the {0} link.</value>
  </data>
  <data name="lblGoToPayPal.Text" xml:space="preserve">
    <value>&lt;p&gt;&lt;strong&gt;You have chosen to pay via PayPal.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Please click the continue button to be transferred to PayPal where you can use your credit/debit card or PayPal account to pay for your order.&lt;/p&gt;</value>
  </data>
  <data name="OrderDateFormat.Text" xml:space="preserve">
    <value>MM/dd/yyyy hh:mm</value>
  </data>
  <data name="OrderThanks.Text" xml:space="preserve">
    <value>Once again, thank you for your order.</value>
  </data>
  <data name="paypalimage2.Text" xml:space="preserve">
    <value>Pay by PayPal using your credit/debit card or PayPal account</value>
  </data>
  <data name="PlacedOrder.Text" xml:space="preserve">
    <value>You recently placed an order with {0}</value>
  </data>
  <data name="RequiresPayment.Text" xml:space="preserve">
    <value>IMPORTANT: Your order now requires payment. You can make a secure online payment via PayPal (using a credit/debit card or your PayPal account) by logging into our site and clicking "{0}" followed by "{1}". If you wish to pay via a method other than PayPal, or would like to cancel your order, please contact us at {2}, or simply reply to this message.</value>
  </data>
  <data name="StatusChanged.Text" xml:space="preserve">
    <value>{0} Order Status Changed</value>
  </data>
  <data name="PayPalReturnTo.Text" xml:space="preserve">
    <value>Return To {0}</value>
  </data>
  <data name="OrderStatus1.Text" xml:space="preserve">
    <value>Awaiting Payment</value>
  </data>
  <data name="OrderStatus2.Text" xml:space="preserve">
    <value>Paid</value>
  </data>
  <data name="OrderStatus3.Text" xml:space="preserve">
    <value>Processing</value>
  </data>
  <data name="OrderStatus4.Text" xml:space="preserve">
    <value>Awaiting Stock</value>
  </data>
  <data name="OrderStatus5.Text" xml:space="preserve">
    <value>Packing</value>
  </data>
  <data name="OrderStatus6.Text" xml:space="preserve">
    <value>Dispatched</value>
  </data>
  <data name="OrderStatus7.Text" xml:space="preserve">
    <value>Cancelled</value>
  </data>
</root>