'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace DAA
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="daa")>  _
	Partial Public Class DAADataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertFramePro(instance As FramePro)
    End Sub
    Partial Private Sub UpdateFramePro(instance As FramePro)
    End Sub
    Partial Private Sub DeleteFramePro(instance As FramePro)
    End Sub
    Partial Private Sub InsertLecturer(instance As Lecturer)
    End Sub
    Partial Private Sub UpdateLecturer(instance As Lecturer)
    End Sub
    Partial Private Sub DeleteLecturer(instance As Lecturer)
    End Sub
    Partial Private Sub InsertMark(instance As Mark)
    End Sub
    Partial Private Sub UpdateMark(instance As Mark)
    End Sub
    Partial Private Sub DeleteMark(instance As Mark)
    End Sub
    Partial Private Sub InsertScheduleM(instance As ScheduleM)
    End Sub
    Partial Private Sub UpdateScheduleM(instance As ScheduleM)
    End Sub
    Partial Private Sub DeleteScheduleM(instance As ScheduleM)
    End Sub
    Partial Private Sub InsertStudent(instance As Student)
    End Sub
    Partial Private Sub UpdateStudent(instance As Student)
    End Sub
    Partial Private Sub DeleteStudent(instance As Student)
    End Sub
    Partial Private Sub InsertSubject(instance As Subject)
    End Sub
    Partial Private Sub UpdateSubject(instance As Subject)
    End Sub
    Partial Private Sub DeleteSubject(instance As Subject)
    End Sub
    Partial Private Sub InsertSuggestClass(instance As SuggestClass)
    End Sub
    Partial Private Sub UpdateSuggestClass(instance As SuggestClass)
    End Sub
    Partial Private Sub DeleteSuggestClass(instance As SuggestClass)
    End Sub
    Partial Private Sub InsertRegisterInfo(instance As RegisterInfo)
    End Sub
    Partial Private Sub UpdateRegisterInfo(instance As RegisterInfo)
    End Sub
    Partial Private Sub DeleteRegisterInfo(instance As RegisterInfo)
    End Sub
    Partial Private Sub InsertSubGroup(instance As SubGroup)
    End Sub
    Partial Private Sub UpdateSubGroup(instance As SubGroup)
    End Sub
    Partial Private Sub DeleteSubGroup(instance As SubGroup)
    End Sub
    Partial Private Sub InsertSubInfo(instance As SubInfo)
    End Sub
    Partial Private Sub UpdateSubInfo(instance As SubInfo)
    End Sub
    Partial Private Sub DeleteSubInfo(instance As SubInfo)
    End Sub
    Partial Private Sub InsertSuggestionInfo(instance As SuggestionInfo)
    End Sub
    Partial Private Sub UpdateSuggestionInfo(instance As SuggestionInfo)
    End Sub
    Partial Private Sub DeleteSuggestionInfo(instance As SuggestionInfo)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property FramePros() As System.Data.Linq.Table(Of FramePro)
			Get
				Return Me.GetTable(Of FramePro)
			End Get
		End Property
		
		Public ReadOnly Property Lecturers() As System.Data.Linq.Table(Of Lecturer)
			Get
				Return Me.GetTable(Of Lecturer)
			End Get
		End Property
		
		Public ReadOnly Property Marks() As System.Data.Linq.Table(Of Mark)
			Get
				Return Me.GetTable(Of Mark)
			End Get
		End Property
		
		Public ReadOnly Property ScheduleMs() As System.Data.Linq.Table(Of ScheduleM)
			Get
				Return Me.GetTable(Of ScheduleM)
			End Get
		End Property
		
		Public ReadOnly Property Students() As System.Data.Linq.Table(Of Student)
			Get
				Return Me.GetTable(Of Student)
			End Get
		End Property
		
		Public ReadOnly Property Subjects() As System.Data.Linq.Table(Of Subject)
			Get
				Return Me.GetTable(Of Subject)
			End Get
		End Property
		
		Public ReadOnly Property SuggestClasses() As System.Data.Linq.Table(Of SuggestClass)
			Get
				Return Me.GetTable(Of SuggestClass)
			End Get
		End Property
		
		Public ReadOnly Property RegisterInfos() As System.Data.Linq.Table(Of RegisterInfo)
			Get
				Return Me.GetTable(Of RegisterInfo)
			End Get
		End Property
		
		Public ReadOnly Property SubGroups() As System.Data.Linq.Table(Of SubGroup)
			Get
				Return Me.GetTable(Of SubGroup)
			End Get
		End Property
		
		Public ReadOnly Property SubInfos() As System.Data.Linq.Table(Of SubInfo)
			Get
				Return Me.GetTable(Of SubInfo)
			End Get
		End Property
		
		Public ReadOnly Property SuggestionInfos() As System.Data.Linq.Table(Of SuggestionInfo)
			Get
				Return Me.GetTable(Of SuggestionInfo)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FramePro")>  _
	Partial Public Class FramePro
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Ace As String
		
		Private _SubID As String
		
		Private _Ord As Short
		
		Private _SubNm As String
		
		Private _Regedits As System.Nullable(Of Short)
		
		Private _Thoer As System.Nullable(Of Short)
		
		Private _Prac As System.Nullable(Of Short)
		
		Private _Term As System.Nullable(Of Short)
		
		Private _Typ As System.Nullable(Of Short)
		
		Private _OrdTerm As Short
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAceChanging(value As String)
    End Sub
    Partial Private Sub OnAceChanged()
    End Sub
    Partial Private Sub OnSubIDChanging(value As String)
    End Sub
    Partial Private Sub OnSubIDChanged()
    End Sub
    Partial Private Sub OnOrdChanging(value As Short)
    End Sub
    Partial Private Sub OnOrdChanged()
    End Sub
    Partial Private Sub OnSubNmChanging(value As String)
    End Sub
    Partial Private Sub OnSubNmChanged()
    End Sub
    Partial Private Sub OnRegeditsChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnRegeditsChanged()
    End Sub
    Partial Private Sub OnThoerChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnThoerChanged()
    End Sub
    Partial Private Sub OnPracChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnPracChanged()
    End Sub
    Partial Private Sub OnTermChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnTermChanged()
    End Sub
    Partial Private Sub OnTypChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnTypChanged()
    End Sub
    Partial Private Sub OnOrdTermChanging(value As Short)
    End Sub
    Partial Private Sub OnOrdTermChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ace", DbType:="NVarChar(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Ace() As String
			Get
				Return Me._Ace
			End Get
			Set
				If (String.Equals(Me._Ace, value) = false) Then
					Me.OnAceChanging(value)
					Me.SendPropertyChanging
					Me._Ace = value
					Me.SendPropertyChanged("Ace")
					Me.OnAceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubID", DbType:="NVarChar(8)")>  _
		Public Property SubID() As String
			Get
				Return Me._SubID
			End Get
			Set
				If (String.Equals(Me._SubID, value) = false) Then
					Me.OnSubIDChanging(value)
					Me.SendPropertyChanging
					Me._SubID = value
					Me.SendPropertyChanged("SubID")
					Me.OnSubIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ord", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Ord() As Short
			Get
				Return Me._Ord
			End Get
			Set
				If ((Me._Ord = value)  _
							= false) Then
					Me.OnOrdChanging(value)
					Me.SendPropertyChanging
					Me._Ord = value
					Me.SendPropertyChanged("Ord")
					Me.OnOrdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubNm", DbType:="NVarChar(65)")>  _
		Public Property SubNm() As String
			Get
				Return Me._SubNm
			End Get
			Set
				If (String.Equals(Me._SubNm, value) = false) Then
					Me.OnSubNmChanging(value)
					Me.SendPropertyChanging
					Me._SubNm = value
					Me.SendPropertyChanged("SubNm")
					Me.OnSubNmChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Regedits", DbType:="SmallInt")>  _
		Public Property Regedits() As System.Nullable(Of Short)
			Get
				Return Me._Regedits
			End Get
			Set
				If (Me._Regedits.Equals(value) = false) Then
					Me.OnRegeditsChanging(value)
					Me.SendPropertyChanging
					Me._Regedits = value
					Me.SendPropertyChanged("Regedits")
					Me.OnRegeditsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Thoer", DbType:="SmallInt")>  _
		Public Property Thoer() As System.Nullable(Of Short)
			Get
				Return Me._Thoer
			End Get
			Set
				If (Me._Thoer.Equals(value) = false) Then
					Me.OnThoerChanging(value)
					Me.SendPropertyChanging
					Me._Thoer = value
					Me.SendPropertyChanged("Thoer")
					Me.OnThoerChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Prac", DbType:="SmallInt")>  _
		Public Property Prac() As System.Nullable(Of Short)
			Get
				Return Me._Prac
			End Get
			Set
				If (Me._Prac.Equals(value) = false) Then
					Me.OnPracChanging(value)
					Me.SendPropertyChanging
					Me._Prac = value
					Me.SendPropertyChanged("Prac")
					Me.OnPracChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term", DbType:="SmallInt")>  _
		Public Property Term() As System.Nullable(Of Short)
			Get
				Return Me._Term
			End Get
			Set
				If (Me._Term.Equals(value) = false) Then
					Me.OnTermChanging(value)
					Me.SendPropertyChanging
					Me._Term = value
					Me.SendPropertyChanged("Term")
					Me.OnTermChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Typ", DbType:="SmallInt")>  _
		Public Property Typ() As System.Nullable(Of Short)
			Get
				Return Me._Typ
			End Get
			Set
				If (Me._Typ.Equals(value) = false) Then
					Me.OnTypChanging(value)
					Me.SendPropertyChanging
					Me._Typ = value
					Me.SendPropertyChanged("Typ")
					Me.OnTypChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrdTerm", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property OrdTerm() As Short
			Get
				Return Me._OrdTerm
			End Get
			Set
				If ((Me._OrdTerm = value)  _
							= false) Then
					Me.OnOrdTermChanging(value)
					Me.SendPropertyChanging
					Me._OrdTerm = value
					Me.SendPropertyChanged("OrdTerm")
					Me.OnOrdTermChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Lecturer")>  _
	Partial Public Class Lecturer
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _LecId As String
		
		Private _LecNm As String
		
		Private _BDay As System.Nullable(Of Date)
		
		Private _Native As String
		
		Private _Gender As System.Nullable(Of Boolean)
		
		Private _APost As String
		
		Private _SPost As String
		
		Private _OPost As String
		
		Private _Address As String
		
		Private _Phone As String
		
		Private _Email As String
		
		Private _IdNum As String
		
		Private _Account As String
		
		Private _AtBank As String
		
		Private _TaxCode As String
		
		Private _Office As String
		
		Private _Dept As String
		
		Private _Memo As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLecIdChanging(value As String)
    End Sub
    Partial Private Sub OnLecIdChanged()
    End Sub
    Partial Private Sub OnLecNmChanging(value As String)
    End Sub
    Partial Private Sub OnLecNmChanged()
    End Sub
    Partial Private Sub OnBDayChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBDayChanged()
    End Sub
    Partial Private Sub OnNativeChanging(value As String)
    End Sub
    Partial Private Sub OnNativeChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnAPostChanging(value As String)
    End Sub
    Partial Private Sub OnAPostChanged()
    End Sub
    Partial Private Sub OnSPostChanging(value As String)
    End Sub
    Partial Private Sub OnSPostChanged()
    End Sub
    Partial Private Sub OnOPostChanging(value As String)
    End Sub
    Partial Private Sub OnOPostChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnIdNumChanging(value As String)
    End Sub
    Partial Private Sub OnIdNumChanged()
    End Sub
    Partial Private Sub OnAccountChanging(value As String)
    End Sub
    Partial Private Sub OnAccountChanged()
    End Sub
    Partial Private Sub OnAtBankChanging(value As String)
    End Sub
    Partial Private Sub OnAtBankChanged()
    End Sub
    Partial Private Sub OnTaxCodeChanging(value As String)
    End Sub
    Partial Private Sub OnTaxCodeChanged()
    End Sub
    Partial Private Sub OnOfficeChanging(value As String)
    End Sub
    Partial Private Sub OnOfficeChanged()
    End Sub
    Partial Private Sub OnDeptChanging(value As String)
    End Sub
    Partial Private Sub OnDeptChanged()
    End Sub
    Partial Private Sub OnMemoChanging(value As String)
    End Sub
    Partial Private Sub OnMemoChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LecId", DbType:="NVarChar(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property LecId() As String
			Get
				Return Me._LecId
			End Get
			Set
				If (String.Equals(Me._LecId, value) = false) Then
					Me.OnLecIdChanging(value)
					Me.SendPropertyChanging
					Me._LecId = value
					Me.SendPropertyChanged("LecId")
					Me.OnLecIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LecNm", DbType:="NVarChar(55)")>  _
		Public Property LecNm() As String
			Get
				Return Me._LecNm
			End Get
			Set
				If (String.Equals(Me._LecNm, value) = false) Then
					Me.OnLecNmChanging(value)
					Me.SendPropertyChanging
					Me._LecNm = value
					Me.SendPropertyChanged("LecNm")
					Me.OnLecNmChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BDay", DbType:="DateTime")>  _
		Public Property BDay() As System.Nullable(Of Date)
			Get
				Return Me._BDay
			End Get
			Set
				If (Me._BDay.Equals(value) = false) Then
					Me.OnBDayChanging(value)
					Me.SendPropertyChanging
					Me._BDay = value
					Me.SendPropertyChanged("BDay")
					Me.OnBDayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Native", DbType:="NVarChar(40)")>  _
		Public Property Native() As String
			Get
				Return Me._Native
			End Get
			Set
				If (String.Equals(Me._Native, value) = false) Then
					Me.OnNativeChanging(value)
					Me.SendPropertyChanging
					Me._Native = value
					Me.SendPropertyChanged("Native")
					Me.OnNativeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="Bit")>  _
		Public Property Gender() As System.Nullable(Of Boolean)
			Get
				Return Me._Gender
			End Get
			Set
				If (Me._Gender.Equals(value) = false) Then
					Me.OnGenderChanging(value)
					Me.SendPropertyChanging
					Me._Gender = value
					Me.SendPropertyChanged("Gender")
					Me.OnGenderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APost", DbType:="NVarChar(4)")>  _
		Public Property APost() As String
			Get
				Return Me._APost
			End Get
			Set
				If (String.Equals(Me._APost, value) = false) Then
					Me.OnAPostChanging(value)
					Me.SendPropertyChanging
					Me._APost = value
					Me.SendPropertyChanged("APost")
					Me.OnAPostChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPost", DbType:="NVarChar(4)")>  _
		Public Property SPost() As String
			Get
				Return Me._SPost
			End Get
			Set
				If (String.Equals(Me._SPost, value) = false) Then
					Me.OnSPostChanging(value)
					Me.SendPropertyChanging
					Me._SPost = value
					Me.SendPropertyChanged("SPost")
					Me.OnSPostChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPost", DbType:="NVarChar(4)")>  _
		Public Property OPost() As String
			Get
				Return Me._OPost
			End Get
			Set
				If (String.Equals(Me._OPost, value) = false) Then
					Me.OnOPostChanging(value)
					Me.SendPropertyChanging
					Me._OPost = value
					Me.SendPropertyChanged("OPost")
					Me.OnOPostChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(100)")>  _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set
				If (String.Equals(Me._Address, value) = false) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(15)")>  _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set
				If (String.Equals(Me._Phone, value) = false) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(40)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdNum", DbType:="NVarChar(14)")>  _
		Public Property IdNum() As String
			Get
				Return Me._IdNum
			End Get
			Set
				If (String.Equals(Me._IdNum, value) = false) Then
					Me.OnIdNumChanging(value)
					Me.SendPropertyChanging
					Me._IdNum = value
					Me.SendPropertyChanged("IdNum")
					Me.OnIdNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Account", DbType:="NVarChar(16)")>  _
		Public Property Account() As String
			Get
				Return Me._Account
			End Get
			Set
				If (String.Equals(Me._Account, value) = false) Then
					Me.OnAccountChanging(value)
					Me.SendPropertyChanging
					Me._Account = value
					Me.SendPropertyChanged("Account")
					Me.OnAccountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AtBank", DbType:="NVarChar(60)")>  _
		Public Property AtBank() As String
			Get
				Return Me._AtBank
			End Get
			Set
				If (String.Equals(Me._AtBank, value) = false) Then
					Me.OnAtBankChanging(value)
					Me.SendPropertyChanging
					Me._AtBank = value
					Me.SendPropertyChanged("AtBank")
					Me.OnAtBankChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxCode", DbType:="NVarChar(15)")>  _
		Public Property TaxCode() As String
			Get
				Return Me._TaxCode
			End Get
			Set
				If (String.Equals(Me._TaxCode, value) = false) Then
					Me.OnTaxCodeChanging(value)
					Me.SendPropertyChanging
					Me._TaxCode = value
					Me.SendPropertyChanged("TaxCode")
					Me.OnTaxCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Office", DbType:="NVarChar(50)")>  _
		Public Property Office() As String
			Get
				Return Me._Office
			End Get
			Set
				If (String.Equals(Me._Office, value) = false) Then
					Me.OnOfficeChanging(value)
					Me.SendPropertyChanging
					Me._Office = value
					Me.SendPropertyChanged("Office")
					Me.OnOfficeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dept", DbType:="NVarChar(3)")>  _
		Public Property Dept() As String
			Get
				Return Me._Dept
			End Get
			Set
				If (String.Equals(Me._Dept, value) = false) Then
					Me.OnDeptChanging(value)
					Me.SendPropertyChanging
					Me._Dept = value
					Me.SendPropertyChanged("Dept")
					Me.OnDeptChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memo", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Memo() As String
			Get
				Return Me._Memo
			End Get
			Set
				If (String.Equals(Me._Memo, value) = false) Then
					Me.OnMemoChanging(value)
					Me.SendPropertyChanging
					Me._Memo = value
					Me.SendPropertyChanged("Memo")
					Me.OnMemoChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Mark")>  _
	Partial Public Class Mark
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _StuId As String
		
		Private _SubId As String
		
		Private _Term As Byte
		
		Private _AYear As String
		
		Private _Mark As System.Nullable(Of Byte)
		
		Private _Mark0 As System.Nullable(Of Integer)
		
		Private _Student As EntityRef(Of Student)
		
		Private _Subject As EntityRef(Of Subject)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStuIdChanging(value As String)
    End Sub
    Partial Private Sub OnStuIdChanged()
    End Sub
    Partial Private Sub OnSubIdChanging(value As String)
    End Sub
    Partial Private Sub OnSubIdChanged()
    End Sub
    Partial Private Sub OnTermChanging(value As Byte)
    End Sub
    Partial Private Sub OnTermChanged()
    End Sub
    Partial Private Sub OnAYearChanging(value As String)
    End Sub
    Partial Private Sub OnAYearChanged()
    End Sub
    Partial Private Sub OnMarkChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnMarkChanged()
    End Sub
    Partial Private Sub OnMark0Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMark0Changed()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Student = CType(Nothing, EntityRef(Of Student))
			Me._Subject = CType(Nothing, EntityRef(Of Subject))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StuId", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property StuId() As String
			Get
				Return Me._StuId
			End Get
			Set
				If (String.Equals(Me._StuId, value) = false) Then
					If Me._Student.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnStuIdChanging(value)
					Me.SendPropertyChanging
					Me._StuId = value
					Me.SendPropertyChanged("StuId")
					Me.OnStuIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubId", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property SubId() As String
			Get
				Return Me._SubId
			End Get
			Set
				If (String.Equals(Me._SubId, value) = false) Then
					If Me._Subject.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSubIdChanging(value)
					Me.SendPropertyChanging
					Me._SubId = value
					Me.SendPropertyChanged("SubId")
					Me.OnSubIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Term() As Byte
			Get
				Return Me._Term
			End Get
			Set
				If ((Me._Term = value)  _
							= false) Then
					Me.OnTermChanging(value)
					Me.SendPropertyChanging
					Me._Term = value
					Me.SendPropertyChanged("Term")
					Me.OnTermChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AYear", DbType:="NVarChar(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property AYear() As String
			Get
				Return Me._AYear
			End Get
			Set
				If (String.Equals(Me._AYear, value) = false) Then
					Me.OnAYearChanging(value)
					Me.SendPropertyChanging
					Me._AYear = value
					Me.SendPropertyChanged("AYear")
					Me.OnAYearChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mark", DbType:="TinyInt")>  _
		Public Property Mark() As System.Nullable(Of Byte)
			Get
				Return Me._Mark
			End Get
			Set
				If (Me._Mark.Equals(value) = false) Then
					Me.OnMarkChanging(value)
					Me.SendPropertyChanging
					Me._Mark = value
					Me.SendPropertyChanged("Mark")
					Me.OnMarkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mark0", DbType:="Int")>  _
		Public Property Mark0() As System.Nullable(Of Integer)
			Get
				Return Me._Mark0
			End Get
			Set
				If (Me._Mark0.Equals(value) = false) Then
					Me.OnMark0Changing(value)
					Me.SendPropertyChanging
					Me._Mark0 = value
					Me.SendPropertyChanged("Mark0")
					Me.OnMark0Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_Mark", Storage:="_Student", ThisKey:="StuId", OtherKey:="StuId", IsForeignKey:=true)>  _
		Public Property Student() As Student
			Get
				Return Me._Student.Entity
			End Get
			Set
				Dim previousValue As Student = Me._Student.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Student.Entity = Nothing
						previousValue.Marks.Remove(Me)
					End If
					Me._Student.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Marks.Add(Me)
						Me._StuId = value.StuId
					Else
						Me._StuId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Student")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_Mark", Storage:="_Subject", ThisKey:="SubId", OtherKey:="SubId", IsForeignKey:=true)>  _
		Public Property Subject() As Subject
			Get
				Return Me._Subject.Entity
			End Get
			Set
				Dim previousValue As Subject = Me._Subject.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Subject.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Subject.Entity = Nothing
						previousValue.Marks.Remove(Me)
					End If
					Me._Subject.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Marks.Add(Me)
						Me._SubId = value.SubId
					Else
						Me._SubId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Subject")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ScheduleM")>  _
	Partial Public Class ScheduleM
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ClassID As String
		
		Private _SubId As String
		
		Private _LecNm As String
		
		Private _Period As String
		
		Private _Day As String
		
		Private _Room As String
		
		Private _StuMx As System.Nullable(Of Short)
		
		Private _CurNm As System.Nullable(Of Short)
		
		Private _Suggest As System.Nullable(Of Boolean)
		
		Private _isAdded As System.Nullable(Of Boolean)
		
		Private _isClosed As System.Nullable(Of Boolean)
		
		Private _RegisterInfos As EntitySet(Of RegisterInfo)
		
		Private _Subject As EntityRef(Of Subject)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnClassIDChanging(value As String)
    End Sub
    Partial Private Sub OnClassIDChanged()
    End Sub
    Partial Private Sub OnSubIdChanging(value As String)
    End Sub
    Partial Private Sub OnSubIdChanged()
    End Sub
    Partial Private Sub OnLecNmChanging(value As String)
    End Sub
    Partial Private Sub OnLecNmChanged()
    End Sub
    Partial Private Sub OnPeriodChanging(value As String)
    End Sub
    Partial Private Sub OnPeriodChanged()
    End Sub
    Partial Private Sub OnDayChanging(value As String)
    End Sub
    Partial Private Sub OnDayChanged()
    End Sub
    Partial Private Sub OnRoomChanging(value As String)
    End Sub
    Partial Private Sub OnRoomChanged()
    End Sub
    Partial Private Sub OnStuMxChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnStuMxChanged()
    End Sub
    Partial Private Sub OnCurNmChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCurNmChanged()
    End Sub
    Partial Private Sub OnSuggestChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSuggestChanged()
    End Sub
    Partial Private Sub OnisAddedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisAddedChanged()
    End Sub
    Partial Private Sub OnisClosedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisClosedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._RegisterInfos = New EntitySet(Of RegisterInfo)(AddressOf Me.attach_RegisterInfos, AddressOf Me.detach_RegisterInfos)
			Me._Subject = CType(Nothing, EntityRef(Of Subject))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClassID() As String
			Get
				Return Me._ClassID
			End Get
			Set
				If (String.Equals(Me._ClassID, value) = false) Then
					Me.OnClassIDChanging(value)
					Me.SendPropertyChanging
					Me._ClassID = value
					Me.SendPropertyChanged("ClassID")
					Me.OnClassIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubId", DbType:="NVarChar(10)")>  _
		Public Property SubId() As String
			Get
				Return Me._SubId
			End Get
			Set
				If (String.Equals(Me._SubId, value) = false) Then
					If Me._Subject.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSubIdChanging(value)
					Me.SendPropertyChanging
					Me._SubId = value
					Me.SendPropertyChanged("SubId")
					Me.OnSubIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LecNm", DbType:="NVarChar(200)")>  _
		Public Property LecNm() As String
			Get
				Return Me._LecNm
			End Get
			Set
				If (String.Equals(Me._LecNm, value) = false) Then
					Me.OnLecNmChanging(value)
					Me.SendPropertyChanging
					Me._LecNm = value
					Me.SendPropertyChanged("LecNm")
					Me.OnLecNmChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Period", DbType:="NVarChar(100)")>  _
		Public Property Period() As String
			Get
				Return Me._Period
			End Get
			Set
				If (String.Equals(Me._Period, value) = false) Then
					Me.OnPeriodChanging(value)
					Me.SendPropertyChanging
					Me._Period = value
					Me.SendPropertyChanged("Period")
					Me.OnPeriodChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Day", DbType:="NVarChar(100)")>  _
		Public Property Day() As String
			Get
				Return Me._Day
			End Get
			Set
				If (String.Equals(Me._Day, value) = false) Then
					Me.OnDayChanging(value)
					Me.SendPropertyChanging
					Me._Day = value
					Me.SendPropertyChanged("Day")
					Me.OnDayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room", DbType:="NVarChar(100)")>  _
		Public Property Room() As String
			Get
				Return Me._Room
			End Get
			Set
				If (String.Equals(Me._Room, value) = false) Then
					Me.OnRoomChanging(value)
					Me.SendPropertyChanging
					Me._Room = value
					Me.SendPropertyChanged("Room")
					Me.OnRoomChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StuMx", DbType:="SmallInt")>  _
		Public Property StuMx() As System.Nullable(Of Short)
			Get
				Return Me._StuMx
			End Get
			Set
				If (Me._StuMx.Equals(value) = false) Then
					Me.OnStuMxChanging(value)
					Me.SendPropertyChanging
					Me._StuMx = value
					Me.SendPropertyChanged("StuMx")
					Me.OnStuMxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurNm", DbType:="SmallInt")>  _
		Public Property CurNm() As System.Nullable(Of Short)
			Get
				Return Me._CurNm
			End Get
			Set
				If (Me._CurNm.Equals(value) = false) Then
					Me.OnCurNmChanging(value)
					Me.SendPropertyChanging
					Me._CurNm = value
					Me.SendPropertyChanged("CurNm")
					Me.OnCurNmChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suggest", DbType:="Bit")>  _
		Public Property Suggest() As System.Nullable(Of Boolean)
			Get
				Return Me._Suggest
			End Get
			Set
				If (Me._Suggest.Equals(value) = false) Then
					Me.OnSuggestChanging(value)
					Me.SendPropertyChanging
					Me._Suggest = value
					Me.SendPropertyChanged("Suggest")
					Me.OnSuggestChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isAdded", DbType:="Bit")>  _
		Public Property isAdded() As System.Nullable(Of Boolean)
			Get
				Return Me._isAdded
			End Get
			Set
				If (Me._isAdded.Equals(value) = false) Then
					Me.OnisAddedChanging(value)
					Me.SendPropertyChanging
					Me._isAdded = value
					Me.SendPropertyChanged("isAdded")
					Me.OnisAddedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isClosed", DbType:="Bit")>  _
		Public Property isClosed() As System.Nullable(Of Boolean)
			Get
				Return Me._isClosed
			End Get
			Set
				If (Me._isClosed.Equals(value) = false) Then
					Me.OnisClosedChanging(value)
					Me.SendPropertyChanging
					Me._isClosed = value
					Me.SendPropertyChanged("isClosed")
					Me.OnisClosedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ScheduleM_RegisterInfo", Storage:="_RegisterInfos", ThisKey:="ClassID", OtherKey:="ClassID")>  _
		Public Property RegisterInfos() As EntitySet(Of RegisterInfo)
			Get
				Return Me._RegisterInfos
			End Get
			Set
				Me._RegisterInfos.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_ScheduleM", Storage:="_Subject", ThisKey:="SubId", OtherKey:="SubId", IsForeignKey:=true)>  _
		Public Property Subject() As Subject
			Get
				Return Me._Subject.Entity
			End Get
			Set
				Dim previousValue As Subject = Me._Subject.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Subject.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Subject.Entity = Nothing
						previousValue.ScheduleMs.Remove(Me)
					End If
					Me._Subject.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ScheduleMs.Add(Me)
						Me._SubId = value.SubId
					Else
						Me._SubId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Subject")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_RegisterInfos(ByVal entity As RegisterInfo)
			Me.SendPropertyChanging
			entity.ScheduleM = Me
		End Sub
		
		Private Sub detach_RegisterInfos(ByVal entity As RegisterInfo)
			Me.SendPropertyChanging
			entity.ScheduleM = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Student")>  _
	Partial Public Class Student
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _StuId As String
		
		Private _StuNm As String
		
		Private _BDay As System.Nullable(Of Date)
		
		Private _Native As String
		
		Private _Gender As System.Nullable(Of Boolean)
		
		Private _EYear As System.Nullable(Of Date)
		
		Private _EClass As String
		
		Private _Dept As String
		
		Private _Degree As String
		
		Private _Status As String
		
		Private _Address As String
		
		Private _Phone As String
		
		Private _Email As String
		
		Private _Idnum As String
		
		Private _Account As String
		
		Private _Amark0 As System.Nullable(Of Byte)
		
		Private _Amark1 As System.Nullable(Of Double)
		
		Private _Amark2 As System.Nullable(Of Byte)
		
		Private _Amark3 As System.Nullable(Of Byte)
		
		Private _Memo As String
		
		Private _ToTal As System.Nullable(Of Double)
		
		Private _RegisterInfos As EntitySet(Of RegisterInfo)
		
		Private _Marks As EntitySet(Of Mark)
		
		Private _SuggestionInfos As EntitySet(Of SuggestionInfo)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStuIdChanging(value As String)
    End Sub
    Partial Private Sub OnStuIdChanged()
    End Sub
    Partial Private Sub OnStuNmChanging(value As String)
    End Sub
    Partial Private Sub OnStuNmChanged()
    End Sub
    Partial Private Sub OnBDayChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBDayChanged()
    End Sub
    Partial Private Sub OnNativeChanging(value As String)
    End Sub
    Partial Private Sub OnNativeChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnEYearChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEYearChanged()
    End Sub
    Partial Private Sub OnEClassChanging(value As String)
    End Sub
    Partial Private Sub OnEClassChanged()
    End Sub
    Partial Private Sub OnDeptChanging(value As String)
    End Sub
    Partial Private Sub OnDeptChanged()
    End Sub
    Partial Private Sub OnDegreeChanging(value As String)
    End Sub
    Partial Private Sub OnDegreeChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnIdnumChanging(value As String)
    End Sub
    Partial Private Sub OnIdnumChanged()
    End Sub
    Partial Private Sub OnAccountChanging(value As String)
    End Sub
    Partial Private Sub OnAccountChanged()
    End Sub
    Partial Private Sub OnAmark0Changing(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnAmark0Changed()
    End Sub
    Partial Private Sub OnAmark1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAmark1Changed()
    End Sub
    Partial Private Sub OnAmark2Changing(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnAmark2Changed()
    End Sub
    Partial Private Sub OnAmark3Changing(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnAmark3Changed()
    End Sub
    Partial Private Sub OnMemoChanging(value As String)
    End Sub
    Partial Private Sub OnMemoChanged()
    End Sub
    Partial Private Sub OnToTalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnToTalChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._RegisterInfos = New EntitySet(Of RegisterInfo)(AddressOf Me.attach_RegisterInfos, AddressOf Me.detach_RegisterInfos)
			Me._Marks = New EntitySet(Of Mark)(AddressOf Me.attach_Marks, AddressOf Me.detach_Marks)
			Me._SuggestionInfos = New EntitySet(Of SuggestionInfo)(AddressOf Me.attach_SuggestionInfos, AddressOf Me.detach_SuggestionInfos)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StuId", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property StuId() As String
			Get
				Return Me._StuId
			End Get
			Set
				If (String.Equals(Me._StuId, value) = false) Then
					Me.OnStuIdChanging(value)
					Me.SendPropertyChanging
					Me._StuId = value
					Me.SendPropertyChanged("StuId")
					Me.OnStuIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StuNm", DbType:="NVarChar(55)")>  _
		Public Property StuNm() As String
			Get
				Return Me._StuNm
			End Get
			Set
				If (String.Equals(Me._StuNm, value) = false) Then
					Me.OnStuNmChanging(value)
					Me.SendPropertyChanging
					Me._StuNm = value
					Me.SendPropertyChanged("StuNm")
					Me.OnStuNmChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BDay", DbType:="DateTime")>  _
		Public Property BDay() As System.Nullable(Of Date)
			Get
				Return Me._BDay
			End Get
			Set
				If (Me._BDay.Equals(value) = false) Then
					Me.OnBDayChanging(value)
					Me.SendPropertyChanging
					Me._BDay = value
					Me.SendPropertyChanged("BDay")
					Me.OnBDayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Native", DbType:="NVarChar(50)")>  _
		Public Property Native() As String
			Get
				Return Me._Native
			End Get
			Set
				If (String.Equals(Me._Native, value) = false) Then
					Me.OnNativeChanging(value)
					Me.SendPropertyChanging
					Me._Native = value
					Me.SendPropertyChanged("Native")
					Me.OnNativeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="Bit")>  _
		Public Property Gender() As System.Nullable(Of Boolean)
			Get
				Return Me._Gender
			End Get
			Set
				If (Me._Gender.Equals(value) = false) Then
					Me.OnGenderChanging(value)
					Me.SendPropertyChanging
					Me._Gender = value
					Me.SendPropertyChanged("Gender")
					Me.OnGenderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EYear", DbType:="DateTime")>  _
		Public Property EYear() As System.Nullable(Of Date)
			Get
				Return Me._EYear
			End Get
			Set
				If (Me._EYear.Equals(value) = false) Then
					Me.OnEYearChanging(value)
					Me.SendPropertyChanging
					Me._EYear = value
					Me.SendPropertyChanged("EYear")
					Me.OnEYearChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EClass", DbType:="NVarChar(8)")>  _
		Public Property EClass() As String
			Get
				Return Me._EClass
			End Get
			Set
				If (String.Equals(Me._EClass, value) = false) Then
					Me.OnEClassChanging(value)
					Me.SendPropertyChanging
					Me._EClass = value
					Me.SendPropertyChanged("EClass")
					Me.OnEClassChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dept", DbType:="NVarChar(3)")>  _
		Public Property Dept() As String
			Get
				Return Me._Dept
			End Get
			Set
				If (String.Equals(Me._Dept, value) = false) Then
					Me.OnDeptChanging(value)
					Me.SendPropertyChanging
					Me._Dept = value
					Me.SendPropertyChanged("Dept")
					Me.OnDeptChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Degree", DbType:="NVarChar(3)")>  _
		Public Property Degree() As String
			Get
				Return Me._Degree
			End Get
			Set
				If (String.Equals(Me._Degree, value) = false) Then
					Me.OnDegreeChanging(value)
					Me.SendPropertyChanging
					Me._Degree = value
					Me.SendPropertyChanged("Degree")
					Me.OnDegreeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(3)")>  _
		Public Property Status() As String
			Get
				Return Me._Status
			End Get
			Set
				If (String.Equals(Me._Status, value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(100)")>  _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set
				If (String.Equals(Me._Address, value) = false) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(15)")>  _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set
				If (String.Equals(Me._Phone, value) = false) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(40)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Idnum", DbType:="NVarChar(14)")>  _
		Public Property Idnum() As String
			Get
				Return Me._Idnum
			End Get
			Set
				If (String.Equals(Me._Idnum, value) = false) Then
					Me.OnIdnumChanging(value)
					Me.SendPropertyChanging
					Me._Idnum = value
					Me.SendPropertyChanged("Idnum")
					Me.OnIdnumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Account", DbType:="NVarChar(16)")>  _
		Public Property Account() As String
			Get
				Return Me._Account
			End Get
			Set
				If (String.Equals(Me._Account, value) = false) Then
					Me.OnAccountChanging(value)
					Me.SendPropertyChanging
					Me._Account = value
					Me.SendPropertyChanged("Account")
					Me.OnAccountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amark0", DbType:="TinyInt")>  _
		Public Property Amark0() As System.Nullable(Of Byte)
			Get
				Return Me._Amark0
			End Get
			Set
				If (Me._Amark0.Equals(value) = false) Then
					Me.OnAmark0Changing(value)
					Me.SendPropertyChanging
					Me._Amark0 = value
					Me.SendPropertyChanged("Amark0")
					Me.OnAmark0Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amark1", DbType:="Float")>  _
		Public Property Amark1() As System.Nullable(Of Double)
			Get
				Return Me._Amark1
			End Get
			Set
				If (Me._Amark1.Equals(value) = false) Then
					Me.OnAmark1Changing(value)
					Me.SendPropertyChanging
					Me._Amark1 = value
					Me.SendPropertyChanged("Amark1")
					Me.OnAmark1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amark2", DbType:="TinyInt")>  _
		Public Property Amark2() As System.Nullable(Of Byte)
			Get
				Return Me._Amark2
			End Get
			Set
				If (Me._Amark2.Equals(value) = false) Then
					Me.OnAmark2Changing(value)
					Me.SendPropertyChanging
					Me._Amark2 = value
					Me.SendPropertyChanged("Amark2")
					Me.OnAmark2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amark3", DbType:="TinyInt")>  _
		Public Property Amark3() As System.Nullable(Of Byte)
			Get
				Return Me._Amark3
			End Get
			Set
				If (Me._Amark3.Equals(value) = false) Then
					Me.OnAmark3Changing(value)
					Me.SendPropertyChanging
					Me._Amark3 = value
					Me.SendPropertyChanged("Amark3")
					Me.OnAmark3Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memo", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Memo() As String
			Get
				Return Me._Memo
			End Get
			Set
				If (String.Equals(Me._Memo, value) = false) Then
					Me.OnMemoChanging(value)
					Me.SendPropertyChanging
					Me._Memo = value
					Me.SendPropertyChanged("Memo")
					Me.OnMemoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToTal", DbType:="Float")>  _
		Public Property ToTal() As System.Nullable(Of Double)
			Get
				Return Me._ToTal
			End Get
			Set
				If (Me._ToTal.Equals(value) = false) Then
					Me.OnToTalChanging(value)
					Me.SendPropertyChanging
					Me._ToTal = value
					Me.SendPropertyChanged("ToTal")
					Me.OnToTalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_RegisterInfo", Storage:="_RegisterInfos", ThisKey:="StuId", OtherKey:="StuId")>  _
		Public Property RegisterInfos() As EntitySet(Of RegisterInfo)
			Get
				Return Me._RegisterInfos
			End Get
			Set
				Me._RegisterInfos.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_Mark", Storage:="_Marks", ThisKey:="StuId", OtherKey:="StuId")>  _
		Public Property Marks() As EntitySet(Of Mark)
			Get
				Return Me._Marks
			End Get
			Set
				Me._Marks.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_SuggestionInfo", Storage:="_SuggestionInfos", ThisKey:="StuId", OtherKey:="StuID")>  _
		Public Property SuggestionInfos() As EntitySet(Of SuggestionInfo)
			Get
				Return Me._SuggestionInfos
			End Get
			Set
				Me._SuggestionInfos.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_RegisterInfos(ByVal entity As RegisterInfo)
			Me.SendPropertyChanging
			entity.Student = Me
		End Sub
		
		Private Sub detach_RegisterInfos(ByVal entity As RegisterInfo)
			Me.SendPropertyChanging
			entity.Student = Nothing
		End Sub
		
		Private Sub attach_Marks(ByVal entity As Mark)
			Me.SendPropertyChanging
			entity.Student = Me
		End Sub
		
		Private Sub detach_Marks(ByVal entity As Mark)
			Me.SendPropertyChanging
			entity.Student = Nothing
		End Sub
		
		Private Sub attach_SuggestionInfos(ByVal entity As SuggestionInfo)
			Me.SendPropertyChanging
			entity.Student = Me
		End Sub
		
		Private Sub detach_SuggestionInfos(ByVal entity As SuggestionInfo)
			Me.SendPropertyChanging
			entity.Student = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Subject")>  _
	Partial Public Class Subject
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SubId As String
		
		Private _SubNm As String
		
		Private _Credits As System.Nullable(Of Byte)
		
		Private _typ As System.Nullable(Of Short)
		
		Private _ScheduleMs As EntitySet(Of ScheduleM)
		
		Private _SuggestClasses As EntitySet(Of SuggestClass)
		
		Private _RegisterInfos As EntitySet(Of RegisterInfo)
		
		Private _Marks As EntitySet(Of Mark)
		
		Private _SubInfos As EntitySet(Of SubInfo)
		
		Private _SubInfos1 As EntitySet(Of SubInfo)
		
		Private _SubInfos2 As EntitySet(Of SubInfo)
		
		Private _SubInfos3 As EntitySet(Of SubInfo)
		
		Private _SuggestionInfos As EntitySet(Of SuggestionInfo)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSubIdChanging(value As String)
    End Sub
    Partial Private Sub OnSubIdChanged()
    End Sub
    Partial Private Sub OnSubNmChanging(value As String)
    End Sub
    Partial Private Sub OnSubNmChanged()
    End Sub
    Partial Private Sub OnCreditsChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnCreditsChanged()
    End Sub
    Partial Private Sub OntypChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OntypChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ScheduleMs = New EntitySet(Of ScheduleM)(AddressOf Me.attach_ScheduleMs, AddressOf Me.detach_ScheduleMs)
			Me._SuggestClasses = New EntitySet(Of SuggestClass)(AddressOf Me.attach_SuggestClasses, AddressOf Me.detach_SuggestClasses)
			Me._RegisterInfos = New EntitySet(Of RegisterInfo)(AddressOf Me.attach_RegisterInfos, AddressOf Me.detach_RegisterInfos)
			Me._Marks = New EntitySet(Of Mark)(AddressOf Me.attach_Marks, AddressOf Me.detach_Marks)
			Me._SubInfos = New EntitySet(Of SubInfo)(AddressOf Me.attach_SubInfos, AddressOf Me.detach_SubInfos)
			Me._SubInfos1 = New EntitySet(Of SubInfo)(AddressOf Me.attach_SubInfos1, AddressOf Me.detach_SubInfos1)
			Me._SubInfos2 = New EntitySet(Of SubInfo)(AddressOf Me.attach_SubInfos2, AddressOf Me.detach_SubInfos2)
			Me._SubInfos3 = New EntitySet(Of SubInfo)(AddressOf Me.attach_SubInfos3, AddressOf Me.detach_SubInfos3)
			Me._SuggestionInfos = New EntitySet(Of SuggestionInfo)(AddressOf Me.attach_SuggestionInfos, AddressOf Me.detach_SuggestionInfos)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubId", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property SubId() As String
			Get
				Return Me._SubId
			End Get
			Set
				If (String.Equals(Me._SubId, value) = false) Then
					Me.OnSubIdChanging(value)
					Me.SendPropertyChanging
					Me._SubId = value
					Me.SendPropertyChanged("SubId")
					Me.OnSubIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubNm", DbType:="NVarChar(55)")>  _
		Public Property SubNm() As String
			Get
				Return Me._SubNm
			End Get
			Set
				If (String.Equals(Me._SubNm, value) = false) Then
					Me.OnSubNmChanging(value)
					Me.SendPropertyChanging
					Me._SubNm = value
					Me.SendPropertyChanged("SubNm")
					Me.OnSubNmChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Credits", DbType:="TinyInt")>  _
		Public Property Credits() As System.Nullable(Of Byte)
			Get
				Return Me._Credits
			End Get
			Set
				If (Me._Credits.Equals(value) = false) Then
					Me.OnCreditsChanging(value)
					Me.SendPropertyChanging
					Me._Credits = value
					Me.SendPropertyChanged("Credits")
					Me.OnCreditsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typ", DbType:="SmallInt")>  _
		Public Property typ() As System.Nullable(Of Short)
			Get
				Return Me._typ
			End Get
			Set
				If (Me._typ.Equals(value) = false) Then
					Me.OntypChanging(value)
					Me.SendPropertyChanging
					Me._typ = value
					Me.SendPropertyChanged("typ")
					Me.OntypChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_ScheduleM", Storage:="_ScheduleMs", ThisKey:="SubId", OtherKey:="SubId")>  _
		Public Property ScheduleMs() As EntitySet(Of ScheduleM)
			Get
				Return Me._ScheduleMs
			End Get
			Set
				Me._ScheduleMs.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SuggestClass", Storage:="_SuggestClasses", ThisKey:="SubId", OtherKey:="SubId")>  _
		Public Property SuggestClasses() As EntitySet(Of SuggestClass)
			Get
				Return Me._SuggestClasses
			End Get
			Set
				Me._SuggestClasses.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_RegisterInfo", Storage:="_RegisterInfos", ThisKey:="SubId", OtherKey:="SubId")>  _
		Public Property RegisterInfos() As EntitySet(Of RegisterInfo)
			Get
				Return Me._RegisterInfos
			End Get
			Set
				Me._RegisterInfos.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_Mark", Storage:="_Marks", ThisKey:="SubId", OtherKey:="SubId")>  _
		Public Property Marks() As EntitySet(Of Mark)
			Get
				Return Me._Marks
			End Get
			Set
				Me._Marks.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SubInfo", Storage:="_SubInfos", ThisKey:="SubId", OtherKey:="ParaSubId")>  _
		Public Property SubInfos() As EntitySet(Of SubInfo)
			Get
				Return Me._SubInfos
			End Get
			Set
				Me._SubInfos.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SubInfo1", Storage:="_SubInfos1", ThisKey:="SubId", OtherKey:="PreSubId")>  _
		Public Property SubInfos1() As EntitySet(Of SubInfo)
			Get
				Return Me._SubInfos1
			End Get
			Set
				Me._SubInfos1.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SubInfo2", Storage:="_SubInfos2", ThisKey:="SubId", OtherKey:="ReSubId")>  _
		Public Property SubInfos2() As EntitySet(Of SubInfo)
			Get
				Return Me._SubInfos2
			End Get
			Set
				Me._SubInfos2.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SubInfo3", Storage:="_SubInfos3", ThisKey:="SubId", OtherKey:="SubId")>  _
		Public Property SubInfos3() As EntitySet(Of SubInfo)
			Get
				Return Me._SubInfos3
			End Get
			Set
				Me._SubInfos3.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SuggestionInfo", Storage:="_SuggestionInfos", ThisKey:="SubId", OtherKey:="SubId")>  _
		Public Property SuggestionInfos() As EntitySet(Of SuggestionInfo)
			Get
				Return Me._SuggestionInfos
			End Get
			Set
				Me._SuggestionInfos.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ScheduleMs(ByVal entity As ScheduleM)
			Me.SendPropertyChanging
			entity.Subject = Me
		End Sub
		
		Private Sub detach_ScheduleMs(ByVal entity As ScheduleM)
			Me.SendPropertyChanging
			entity.Subject = Nothing
		End Sub
		
		Private Sub attach_SuggestClasses(ByVal entity As SuggestClass)
			Me.SendPropertyChanging
			entity.Subject = Me
		End Sub
		
		Private Sub detach_SuggestClasses(ByVal entity As SuggestClass)
			Me.SendPropertyChanging
			entity.Subject = Nothing
		End Sub
		
		Private Sub attach_RegisterInfos(ByVal entity As RegisterInfo)
			Me.SendPropertyChanging
			entity.Subject = Me
		End Sub
		
		Private Sub detach_RegisterInfos(ByVal entity As RegisterInfo)
			Me.SendPropertyChanging
			entity.Subject = Nothing
		End Sub
		
		Private Sub attach_Marks(ByVal entity As Mark)
			Me.SendPropertyChanging
			entity.Subject = Me
		End Sub
		
		Private Sub detach_Marks(ByVal entity As Mark)
			Me.SendPropertyChanging
			entity.Subject = Nothing
		End Sub
		
		Private Sub attach_SubInfos(ByVal entity As SubInfo)
			Me.SendPropertyChanging
			entity.Subject = Me
		End Sub
		
		Private Sub detach_SubInfos(ByVal entity As SubInfo)
			Me.SendPropertyChanging
			entity.Subject = Nothing
		End Sub
		
		Private Sub attach_SubInfos1(ByVal entity As SubInfo)
			Me.SendPropertyChanging
			entity.Subject1 = Me
		End Sub
		
		Private Sub detach_SubInfos1(ByVal entity As SubInfo)
			Me.SendPropertyChanging
			entity.Subject1 = Nothing
		End Sub
		
		Private Sub attach_SubInfos2(ByVal entity As SubInfo)
			Me.SendPropertyChanging
			entity.Subject2 = Me
		End Sub
		
		Private Sub detach_SubInfos2(ByVal entity As SubInfo)
			Me.SendPropertyChanging
			entity.Subject2 = Nothing
		End Sub
		
		Private Sub attach_SubInfos3(ByVal entity As SubInfo)
			Me.SendPropertyChanging
			entity.Subject3 = Me
		End Sub
		
		Private Sub detach_SubInfos3(ByVal entity As SubInfo)
			Me.SendPropertyChanging
			entity.Subject3 = Nothing
		End Sub
		
		Private Sub attach_SuggestionInfos(ByVal entity As SuggestionInfo)
			Me.SendPropertyChanging
			entity.Subject = Me
		End Sub
		
		Private Sub detach_SuggestionInfos(ByVal entity As SuggestionInfo)
			Me.SendPropertyChanging
			entity.Subject = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tssdhuit.SuggestClass")>  _
	Partial Public Class SuggestClass
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ClassID As String
		
		Private _SubId As String
		
		Private _LecNm As String
		
		Private _Period As String
		
		Private _Day As String
		
		Private _Room As String
		
		Private _StuMx As System.Nullable(Of Short)
		
		Private _CurNm As System.Nullable(Of Short)
		
		Private _Subject As EntityRef(Of Subject)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnClassIDChanging(value As String)
    End Sub
    Partial Private Sub OnClassIDChanged()
    End Sub
    Partial Private Sub OnSubIdChanging(value As String)
    End Sub
    Partial Private Sub OnSubIdChanged()
    End Sub
    Partial Private Sub OnLecNmChanging(value As String)
    End Sub
    Partial Private Sub OnLecNmChanged()
    End Sub
    Partial Private Sub OnPeriodChanging(value As String)
    End Sub
    Partial Private Sub OnPeriodChanged()
    End Sub
    Partial Private Sub OnDayChanging(value As String)
    End Sub
    Partial Private Sub OnDayChanged()
    End Sub
    Partial Private Sub OnRoomChanging(value As String)
    End Sub
    Partial Private Sub OnRoomChanged()
    End Sub
    Partial Private Sub OnStuMxChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnStuMxChanged()
    End Sub
    Partial Private Sub OnCurNmChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCurNmChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Subject = CType(Nothing, EntityRef(Of Subject))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClassID() As String
			Get
				Return Me._ClassID
			End Get
			Set
				If (String.Equals(Me._ClassID, value) = false) Then
					Me.OnClassIDChanging(value)
					Me.SendPropertyChanging
					Me._ClassID = value
					Me.SendPropertyChanged("ClassID")
					Me.OnClassIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubId", DbType:="NVarChar(10)")>  _
		Public Property SubId() As String
			Get
				Return Me._SubId
			End Get
			Set
				If (String.Equals(Me._SubId, value) = false) Then
					If Me._Subject.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSubIdChanging(value)
					Me.SendPropertyChanging
					Me._SubId = value
					Me.SendPropertyChanged("SubId")
					Me.OnSubIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LecNm", DbType:="NVarChar(50)")>  _
		Public Property LecNm() As String
			Get
				Return Me._LecNm
			End Get
			Set
				If (String.Equals(Me._LecNm, value) = false) Then
					Me.OnLecNmChanging(value)
					Me.SendPropertyChanging
					Me._LecNm = value
					Me.SendPropertyChanged("LecNm")
					Me.OnLecNmChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Period", DbType:="NVarChar(100)")>  _
		Public Property Period() As String
			Get
				Return Me._Period
			End Get
			Set
				If (String.Equals(Me._Period, value) = false) Then
					Me.OnPeriodChanging(value)
					Me.SendPropertyChanging
					Me._Period = value
					Me.SendPropertyChanged("Period")
					Me.OnPeriodChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Day", DbType:="NVarChar(100)")>  _
		Public Property Day() As String
			Get
				Return Me._Day
			End Get
			Set
				If (String.Equals(Me._Day, value) = false) Then
					Me.OnDayChanging(value)
					Me.SendPropertyChanging
					Me._Day = value
					Me.SendPropertyChanged("Day")
					Me.OnDayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room", DbType:="NVarChar(100)")>  _
		Public Property Room() As String
			Get
				Return Me._Room
			End Get
			Set
				If (String.Equals(Me._Room, value) = false) Then
					Me.OnRoomChanging(value)
					Me.SendPropertyChanging
					Me._Room = value
					Me.SendPropertyChanged("Room")
					Me.OnRoomChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StuMx", DbType:="SmallInt")>  _
		Public Property StuMx() As System.Nullable(Of Short)
			Get
				Return Me._StuMx
			End Get
			Set
				If (Me._StuMx.Equals(value) = false) Then
					Me.OnStuMxChanging(value)
					Me.SendPropertyChanging
					Me._StuMx = value
					Me.SendPropertyChanged("StuMx")
					Me.OnStuMxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurNm", DbType:="SmallInt")>  _
		Public Property CurNm() As System.Nullable(Of Short)
			Get
				Return Me._CurNm
			End Get
			Set
				If (Me._CurNm.Equals(value) = false) Then
					Me.OnCurNmChanging(value)
					Me.SendPropertyChanging
					Me._CurNm = value
					Me.SendPropertyChanged("CurNm")
					Me.OnCurNmChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SuggestClass", Storage:="_Subject", ThisKey:="SubId", OtherKey:="SubId", IsForeignKey:=true)>  _
		Public Property Subject() As Subject
			Get
				Return Me._Subject.Entity
			End Get
			Set
				Dim previousValue As Subject = Me._Subject.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Subject.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Subject.Entity = Nothing
						previousValue.SuggestClasses.Remove(Me)
					End If
					Me._Subject.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SuggestClasses.Add(Me)
						Me._SubId = value.SubId
					Else
						Me._SubId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Subject")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RegisterInfo")>  _
	Partial Public Class RegisterInfo
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _StuId As String
		
		Private _ClassID As String
		
		Private _SubId As String
		
		Private _Date As System.Nullable(Of Date)
		
		Private _ReReg As System.Nullable(Of Short)
		
		Private _ScheduleM As EntityRef(Of ScheduleM)
		
		Private _Student As EntityRef(Of Student)
		
		Private _Subject As EntityRef(Of Subject)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStuIdChanging(value As String)
    End Sub
    Partial Private Sub OnStuIdChanged()
    End Sub
    Partial Private Sub OnClassIDChanging(value As String)
    End Sub
    Partial Private Sub OnClassIDChanged()
    End Sub
    Partial Private Sub OnSubIdChanging(value As String)
    End Sub
    Partial Private Sub OnSubIdChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnReRegChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnReRegChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ScheduleM = CType(Nothing, EntityRef(Of ScheduleM))
			Me._Student = CType(Nothing, EntityRef(Of Student))
			Me._Subject = CType(Nothing, EntityRef(Of Subject))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StuId", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property StuId() As String
			Get
				Return Me._StuId
			End Get
			Set
				If (String.Equals(Me._StuId, value) = false) Then
					If Me._Student.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnStuIdChanging(value)
					Me.SendPropertyChanging
					Me._StuId = value
					Me.SendPropertyChanged("StuId")
					Me.OnStuIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property ClassID() As String
			Get
				Return Me._ClassID
			End Get
			Set
				If (String.Equals(Me._ClassID, value) = false) Then
					If Me._ScheduleM.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnClassIDChanging(value)
					Me.SendPropertyChanging
					Me._ClassID = value
					Me.SendPropertyChanged("ClassID")
					Me.OnClassIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubId", DbType:="NVarChar(10)")>  _
		Public Property SubId() As String
			Get
				Return Me._SubId
			End Get
			Set
				If (String.Equals(Me._SubId, value) = false) Then
					If Me._Subject.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSubIdChanging(value)
					Me.SendPropertyChanging
					Me._SubId = value
					Me.SendPropertyChanged("SubId")
					Me.OnSubIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="SmallDateTime")>  _
		Public Property [Date]() As System.Nullable(Of Date)
			Get
				Return Me._Date
			End Get
			Set
				If (Me._Date.Equals(value) = false) Then
					Me.OnDateChanging(value)
					Me.SendPropertyChanging
					Me._Date = value
					Me.SendPropertyChanged("[Date]")
					Me.OnDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReReg", DbType:="SmallInt")>  _
		Public Property ReReg() As System.Nullable(Of Short)
			Get
				Return Me._ReReg
			End Get
			Set
				If (Me._ReReg.Equals(value) = false) Then
					Me.OnReRegChanging(value)
					Me.SendPropertyChanging
					Me._ReReg = value
					Me.SendPropertyChanged("ReReg")
					Me.OnReRegChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ScheduleM_RegisterInfo", Storage:="_ScheduleM", ThisKey:="ClassID", OtherKey:="ClassID", IsForeignKey:=true)>  _
		Public Property ScheduleM() As ScheduleM
			Get
				Return Me._ScheduleM.Entity
			End Get
			Set
				Dim previousValue As ScheduleM = Me._ScheduleM.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._ScheduleM.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._ScheduleM.Entity = Nothing
						previousValue.RegisterInfos.Remove(Me)
					End If
					Me._ScheduleM.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.RegisterInfos.Add(Me)
						Me._ClassID = value.ClassID
					Else
						Me._ClassID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("ScheduleM")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_RegisterInfo", Storage:="_Student", ThisKey:="StuId", OtherKey:="StuId", IsForeignKey:=true)>  _
		Public Property Student() As Student
			Get
				Return Me._Student.Entity
			End Get
			Set
				Dim previousValue As Student = Me._Student.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Student.Entity = Nothing
						previousValue.RegisterInfos.Remove(Me)
					End If
					Me._Student.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.RegisterInfos.Add(Me)
						Me._StuId = value.StuId
					Else
						Me._StuId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Student")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_RegisterInfo", Storage:="_Subject", ThisKey:="SubId", OtherKey:="SubId", IsForeignKey:=true)>  _
		Public Property Subject() As Subject
			Get
				Return Me._Subject.Entity
			End Get
			Set
				Dim previousValue As Subject = Me._Subject.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Subject.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Subject.Entity = Nothing
						previousValue.RegisterInfos.Remove(Me)
					End If
					Me._Subject.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.RegisterInfos.Add(Me)
						Me._SubId = value.SubId
					Else
						Me._SubId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Subject")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SubGroup")>  _
	Partial Public Class SubGroup
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _GroupId As Short
		
		Private _Info As String
		
		Private _SubInfos As EntitySet(Of SubInfo)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIdChanging(value As Short)
    End Sub
    Partial Private Sub OnGroupIdChanged()
    End Sub
    Partial Private Sub OnInfoChanging(value As String)
    End Sub
    Partial Private Sub OnInfoChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._SubInfos = New EntitySet(Of SubInfo)(AddressOf Me.attach_SubInfos, AddressOf Me.detach_SubInfos)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupId", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property GroupId() As Short
			Get
				Return Me._GroupId
			End Get
			Set
				If ((Me._GroupId = value)  _
							= false) Then
					Me.OnGroupIdChanging(value)
					Me.SendPropertyChanging
					Me._GroupId = value
					Me.SendPropertyChanged("GroupId")
					Me.OnGroupIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Info", DbType:="NVarChar(50)")>  _
		Public Property Info() As String
			Get
				Return Me._Info
			End Get
			Set
				If (String.Equals(Me._Info, value) = false) Then
					Me.OnInfoChanging(value)
					Me.SendPropertyChanging
					Me._Info = value
					Me.SendPropertyChanged("Info")
					Me.OnInfoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SubGroup_SubInfo", Storage:="_SubInfos", ThisKey:="GroupId", OtherKey:="GroupId")>  _
		Public Property SubInfos() As EntitySet(Of SubInfo)
			Get
				Return Me._SubInfos
			End Get
			Set
				Me._SubInfos.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_SubInfos(ByVal entity As SubInfo)
			Me.SendPropertyChanging
			entity.SubGroup = Me
		End Sub
		
		Private Sub detach_SubInfos(ByVal entity As SubInfo)
			Me.SendPropertyChanging
			entity.SubGroup = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SubInfo")>  _
	Partial Public Class SubInfo
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SubId As String
		
		Private _PreSubId As String
		
		Private _ParaSubId As String
		
		Private _ReSubId As String
		
		Private _GroupId As System.Nullable(Of Short)
		
		Private _typ As Short
		
		Private _SubGroup As EntityRef(Of SubGroup)
		
		Private _Subject As EntityRef(Of Subject)
		
		Private _Subject1 As EntityRef(Of Subject)
		
		Private _Subject2 As EntityRef(Of Subject)
		
		Private _Subject3 As EntityRef(Of Subject)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSubIdChanging(value As String)
    End Sub
    Partial Private Sub OnSubIdChanged()
    End Sub
    Partial Private Sub OnPreSubIdChanging(value As String)
    End Sub
    Partial Private Sub OnPreSubIdChanged()
    End Sub
    Partial Private Sub OnParaSubIdChanging(value As String)
    End Sub
    Partial Private Sub OnParaSubIdChanged()
    End Sub
    Partial Private Sub OnReSubIdChanging(value As String)
    End Sub
    Partial Private Sub OnReSubIdChanged()
    End Sub
    Partial Private Sub OnGroupIdChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnGroupIdChanged()
    End Sub
    Partial Private Sub OntypChanging(value As Short)
    End Sub
    Partial Private Sub OntypChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._SubGroup = CType(Nothing, EntityRef(Of SubGroup))
			Me._Subject = CType(Nothing, EntityRef(Of Subject))
			Me._Subject1 = CType(Nothing, EntityRef(Of Subject))
			Me._Subject2 = CType(Nothing, EntityRef(Of Subject))
			Me._Subject3 = CType(Nothing, EntityRef(Of Subject))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubId", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property SubId() As String
			Get
				Return Me._SubId
			End Get
			Set
				If (String.Equals(Me._SubId, value) = false) Then
					If Me._Subject3.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSubIdChanging(value)
					Me.SendPropertyChanging
					Me._SubId = value
					Me.SendPropertyChanged("SubId")
					Me.OnSubIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreSubId", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property PreSubId() As String
			Get
				Return Me._PreSubId
			End Get
			Set
				If (String.Equals(Me._PreSubId, value) = false) Then
					If Me._Subject1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnPreSubIdChanging(value)
					Me.SendPropertyChanging
					Me._PreSubId = value
					Me.SendPropertyChanged("PreSubId")
					Me.OnPreSubIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParaSubId", DbType:="NVarChar(10)")>  _
		Public Property ParaSubId() As String
			Get
				Return Me._ParaSubId
			End Get
			Set
				If (String.Equals(Me._ParaSubId, value) = false) Then
					If Me._Subject.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnParaSubIdChanging(value)
					Me.SendPropertyChanging
					Me._ParaSubId = value
					Me.SendPropertyChanged("ParaSubId")
					Me.OnParaSubIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReSubId", DbType:="NVarChar(10)")>  _
		Public Property ReSubId() As String
			Get
				Return Me._ReSubId
			End Get
			Set
				If (String.Equals(Me._ReSubId, value) = false) Then
					If Me._Subject2.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnReSubIdChanging(value)
					Me.SendPropertyChanging
					Me._ReSubId = value
					Me.SendPropertyChanged("ReSubId")
					Me.OnReSubIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupId", DbType:="SmallInt")>  _
		Public Property GroupId() As System.Nullable(Of Short)
			Get
				Return Me._GroupId
			End Get
			Set
				If (Me._GroupId.Equals(value) = false) Then
					If Me._SubGroup.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnGroupIdChanging(value)
					Me.SendPropertyChanging
					Me._GroupId = value
					Me.SendPropertyChanged("GroupId")
					Me.OnGroupIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typ", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property typ() As Short
			Get
				Return Me._typ
			End Get
			Set
				If ((Me._typ = value)  _
							= false) Then
					Me.OntypChanging(value)
					Me.SendPropertyChanging
					Me._typ = value
					Me.SendPropertyChanged("typ")
					Me.OntypChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SubGroup_SubInfo", Storage:="_SubGroup", ThisKey:="GroupId", OtherKey:="GroupId", IsForeignKey:=true)>  _
		Public Property SubGroup() As SubGroup
			Get
				Return Me._SubGroup.Entity
			End Get
			Set
				Dim previousValue As SubGroup = Me._SubGroup.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._SubGroup.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._SubGroup.Entity = Nothing
						previousValue.SubInfos.Remove(Me)
					End If
					Me._SubGroup.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SubInfos.Add(Me)
						Me._GroupId = value.GroupId
					Else
						Me._GroupId = CType(Nothing, Nullable(Of Short))
					End If
					Me.SendPropertyChanged("SubGroup")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SubInfo", Storage:="_Subject", ThisKey:="ParaSubId", OtherKey:="SubId", IsForeignKey:=true)>  _
		Public Property Subject() As Subject
			Get
				Return Me._Subject.Entity
			End Get
			Set
				Dim previousValue As Subject = Me._Subject.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Subject.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Subject.Entity = Nothing
						previousValue.SubInfos.Remove(Me)
					End If
					Me._Subject.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SubInfos.Add(Me)
						Me._ParaSubId = value.SubId
					Else
						Me._ParaSubId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Subject")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SubInfo1", Storage:="_Subject1", ThisKey:="PreSubId", OtherKey:="SubId", IsForeignKey:=true)>  _
		Public Property Subject1() As Subject
			Get
				Return Me._Subject1.Entity
			End Get
			Set
				Dim previousValue As Subject = Me._Subject1.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Subject1.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Subject1.Entity = Nothing
						previousValue.SubInfos1.Remove(Me)
					End If
					Me._Subject1.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SubInfos1.Add(Me)
						Me._PreSubId = value.SubId
					Else
						Me._PreSubId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Subject1")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SubInfo2", Storage:="_Subject2", ThisKey:="ReSubId", OtherKey:="SubId", IsForeignKey:=true)>  _
		Public Property Subject2() As Subject
			Get
				Return Me._Subject2.Entity
			End Get
			Set
				Dim previousValue As Subject = Me._Subject2.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Subject2.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Subject2.Entity = Nothing
						previousValue.SubInfos2.Remove(Me)
					End If
					Me._Subject2.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SubInfos2.Add(Me)
						Me._ReSubId = value.SubId
					Else
						Me._ReSubId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Subject2")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SubInfo3", Storage:="_Subject3", ThisKey:="SubId", OtherKey:="SubId", IsForeignKey:=true)>  _
		Public Property Subject3() As Subject
			Get
				Return Me._Subject3.Entity
			End Get
			Set
				Dim previousValue As Subject = Me._Subject3.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Subject3.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Subject3.Entity = Nothing
						previousValue.SubInfos3.Remove(Me)
					End If
					Me._Subject3.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SubInfos3.Add(Me)
						Me._SubId = value.SubId
					Else
						Me._SubId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Subject3")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SuggestionInfo")>  _
	Partial Public Class SuggestionInfo
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _StuID As String
		
		Private _SubId As String
		
		Private _Student As EntityRef(Of Student)
		
		Private _Subject As EntityRef(Of Subject)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStuIDChanging(value As String)
    End Sub
    Partial Private Sub OnStuIDChanged()
    End Sub
    Partial Private Sub OnSubIdChanging(value As String)
    End Sub
    Partial Private Sub OnSubIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Student = CType(Nothing, EntityRef(Of Student))
			Me._Subject = CType(Nothing, EntityRef(Of Subject))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StuID", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property StuID() As String
			Get
				Return Me._StuID
			End Get
			Set
				If (String.Equals(Me._StuID, value) = false) Then
					If Me._Student.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnStuIDChanging(value)
					Me.SendPropertyChanging
					Me._StuID = value
					Me.SendPropertyChanged("StuID")
					Me.OnStuIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubId", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property SubId() As String
			Get
				Return Me._SubId
			End Get
			Set
				If (String.Equals(Me._SubId, value) = false) Then
					If Me._Subject.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSubIdChanging(value)
					Me.SendPropertyChanging
					Me._SubId = value
					Me.SendPropertyChanged("SubId")
					Me.OnSubIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_SuggestionInfo", Storage:="_Student", ThisKey:="StuID", OtherKey:="StuId", IsForeignKey:=true)>  _
		Public Property Student() As Student
			Get
				Return Me._Student.Entity
			End Get
			Set
				Dim previousValue As Student = Me._Student.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Student.Entity = Nothing
						previousValue.SuggestionInfos.Remove(Me)
					End If
					Me._Student.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SuggestionInfos.Add(Me)
						Me._StuID = value.StuId
					Else
						Me._StuID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Student")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_SuggestionInfo", Storage:="_Subject", ThisKey:="SubId", OtherKey:="SubId", IsForeignKey:=true)>  _
		Public Property Subject() As Subject
			Get
				Return Me._Subject.Entity
			End Get
			Set
				Dim previousValue As Subject = Me._Subject.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Subject.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Subject.Entity = Nothing
						previousValue.SuggestionInfos.Remove(Me)
					End If
					Me._Subject.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SuggestionInfos.Add(Me)
						Me._SubId = value.SubId
					Else
						Me._SubId = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Subject")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
